package ki.jfour;


import java.util.Arrays;
import java.util.List;
import java.util.Random;
public class MyMinMaxAI extends AI{

    public void start(Board b) {
        Player player = b.getCurrentPlayer();
        // depth = 5
        findBestMove(b, 5, Integer.MIN_VALUE, Integer.MAX_VALUE, true, player);
    }


    public int evaluate(Board b, Player myPlayer) {
        int score = 0;
        Player opponentPlayer = Player.RED;

        if (myPlayer == Player.RED) {
            opponentPlayer = Player.BLUE;
        }

        if (b.getWinner() == myPlayer) {
            score += 10000;
        }if (b.getThreeRower() == myPlayer) {
            score += 20;
        } if (b.getTwoRower() == myPlayer) {
            score += 2;
        }
        if (b.getWinner() == opponentPlayer) {
            score -= -10000;
        } if (b.getThreeRower() == opponentPlayer) {
            score -= 20;
        } if(b.getTwoRower() == opponentPlayer) {
            score -= 2;
        }

        /// specifically score 3 center columns

        int width = b.getWidth();
        int[] middleColumns =  new int[]{(width/2-1), width/2, (width/2+1)};
        int centerCount = 0;

        Player[][] boardState = b.getState();

        for (int i = 0; i < boardState.length; i++) {
            if (boardState[i][middleColumns[0]] == myPlayer) {
                centerCount += 1;
            }
            if (boardState[i][middleColumns[1]] == myPlayer) {
                centerCount += 1;
            }
            if (boardState[i][middleColumns[2]] == myPlayer) {
                centerCount += 1;
            }
        }
        score += centerCount;


        return score;
    }

    public boolean isTerminalNode(Board b) {
        if (b.getWinner() != Player.NONE) {
            return true;
        }
        if (b.possibleMoves().size() == 0) {
            return true;
        }
        return false;
    }

    public Move makeRandomMove(Board b) {
        List<Move> possibleMoves = b.possibleMoves();
        Random random = new Random();
        return possibleMoves.get(random.nextInt(possibleMoves.size()));
    }


    public int[] findBestMove(Board b, int depth, int alpha, int beta ,boolean isMax, Player myPlayer) {
        List<Move> possibleMoves = b.possibleMoves();
        //setBestMove(makeRandomMove(b));
        Player opponentPlayer = Player.BLUE;
        if (myPlayer == Player.BLUE) {
            opponentPlayer = Player.RED;
        }

        int boardWidth = b.getWidth();
        setBestMove(new Move(boardWidth/2));

        boolean isTerminal = isTerminalNode(b);
        if (isTerminal || depth == 0) {
            if (isTerminal) {
                if (b.getWinner() == myPlayer) {
                    return new int[]{+1000000, -1};
                } else if (b.getWinner() == opponentPlayer) {
                    return new int[]{-1000000, -1};
                } else {
                    return new int[]{0, -1};
                }
            }
            else {
                //System.out.println(b);
                return new int[]{evaluate(b, myPlayer), -1};
            }

        }
        if(isMax) {
            int value = Integer.MIN_VALUE;
            Move bestMove = new Move(0);
            for (Move possibleMove: possibleMoves) {
                Board board_copy = b;
                board_copy = board_copy.executeMove(possibleMove);
                int newScore = findBestMove(board_copy, depth-1,alpha ,beta,false, myPlayer)[0];
                if (newScore > value) {
                    value = newScore;
                    bestMove = possibleMove;
                    //setBestMove(bestMove);
                }
                alpha = Math.max(alpha, value);
                /*
                if (alpha >= beta) {
                    break;
                }

                 */
            }
            setBestMove(new Move(bestMove.column));
            return new int[]{value, bestMove.column};
        }
        else {
            int value = Integer.MAX_VALUE;
            Move bestMove = new Move(0);
            for (Move possibleMove: possibleMoves) {
                Board board_copy = b;
                board_copy = board_copy.executeMove(possibleMove);
                int newScore = findBestMove(board_copy, depth-1,alpha ,beta,true, myPlayer)[0];
                if (newScore < value) {
                    value = newScore;
                    bestMove = possibleMove;
                    //setBestMove(bestMove);
                }
                alpha = Math.min(beta, value);
                /*
                if (alpha >= beta) {
                    break;
                }

                 */
            }
            setBestMove(new Move(bestMove.column));
            return new int[]{value, bestMove.column};
        }
    }


    public String getDescription() {
        return "Simon Unterlugauer";
    }

}




/*
public Move findBestCol(Board b, Player myPlayer) {
        List<Move> possibleMoves = b.possibleMoves();
        int bestScore = Integer.MIN_VALUE;
        Move bestMove = new Move(0);
        for (Move possibleMove: possibleMoves) {
            Board tempBoard = b.executeMove(possibleMove);
            int score = evaluate(tempBoard, myPlayer);
            if (score > bestScore) {
                bestMove = possibleMove;
                bestScore = score;
            }
        }
        return bestMove;
   }
 */