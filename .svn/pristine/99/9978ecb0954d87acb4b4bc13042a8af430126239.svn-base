package ki.jfour;

import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class MyMCTSAI extends AI {


    // init max depth && make max_depth ==

    // maybe also undo the move in function minmax -> still need to check what is the effect of this
    @Override
    public void start(Board b) {
        // make Method find best move
        findBestMonteMove(b);
    }


    /// function to simulate the opponent -- choose random move of possible game Moves

    public Move makeRandomMove(Board b) {
        List<Move> possibleMoves = b.possibleMoves();
        Random random = new Random();
        return possibleMoves.get(random.nextInt(possibleMoves.size()));
    }





    public int getBestValue(int[] array) {
        int bestValue = 0;
        int bestRow = 0;
        for(int i = 0; i < array.length; i++) {
            if (array[i] > bestValue) {
                bestValue = array[i];
                bestRow = i;
            }
        }
        //System.out.println(bestValue);
        return bestRow;
    }


    /// function that tries to find the best move by evaluating every possible move
    public Move findBestMonteMove(Board b) {

        // get Current Board State
        Player[][] boardState = b.getState();

        // get Board Width
        int boardWidth = 0;
        for (int i = 0; i < boardState[0].length; i++) {
            boardWidth += 1;
        }
        setBestMove(new Move(boardWidth/2));

        // create Array to check if column has already been searched and stop loop if already been searched
        boolean[] checkCol = new boolean[boardWidth];
        int[] winsTotal = new int[boardWidth];
        Board beforeBoard = b;
        for (int i = 0; i < boardState.length; i++) {
            for (int j = 0; j < boardState[0].length; j++) {
                if (!checkCol[j] && boardState[i][j] == Player.NONE) { // if not only thrown in col && field = empty
                    b = b.executeMove(new Move(j));
                    //winsTotal = new int[boardWidth];
                    for(int k = 0; k < 80; k++) {
                        winsTotal[j] += playRandomGame(b);
                    }
                    checkCol[j] = true;
                    b = beforeBoard;
                }

            }
        }
        int selectedRow = getBestValue(winsTotal);
        //System.out.println(Arrays.toString(winsTotal));
        setBestMove(new Move(selectedRow));
        return new Move(selectedRow);
    }

    public int playRandomGame(Board b) {

        while(b.getWinner() == Player.NONE && b.possibleMoves().size() > 0) {
            b = b.executeMove(makeRandomMove(b));
        }
        return evaluate(b);
    }

    public int evaluate(Board b) {
        if (b.getWinner() == Player.RED) {
            return +10;
        }
        if (b.getWinner() == Player.BLUE) {
            return -10;
        }
        return 0;
    }






    // keine Ahnung was das hier f√ºr ein kack ist
    @Override
    public String getDescription() {
        return "Simon Unterlugauer";
    }




    /*
    public static void main(String[] args) {


        Board b = new Board(4, 6);
        b = b.executeMove(new Move(0));
        b = b.executeMove(new Move(0));
        b = b.executeMove(new Move(1));
        b = b.executeMove(new Move(1));
        b = b.executeMove(new Move(2));
        b = b.executeMove(new Move(2));
        System.out.println(b);

        Move move = new MyMinMaxAI().findBestMove(b);
        System.out.println(move);


        Board b = new Board(5, 7);
        new MyMCTSAI().start(b);



    }
    */







}


/* Old Loop of function findNextBestMove
        for (int i = 0; i < boardState.length; i++) {
            for (int j = 0; j < boardState[i].length; j++) {
                if (boardState[i][j] == Player.NONE) {
                    Board startBoard = b;
                    // execute Move in col j
                    b = b.executeMove(new Move(j));
                    int moveValue = minmax(b, 0, true); /// is Max maybe switching
                    System.out.println("First Iteration finished");

                    //undo the move
                    //b = startBoard;

                    if (moveValue > bestVal) {
                        // place in right col (possibly change i to j) not to sure
                        //System.out.println("Change");
                        bestMoveRow = j;
                        bestVal = moveValue;
                    }
                }
            }
        }
         */
