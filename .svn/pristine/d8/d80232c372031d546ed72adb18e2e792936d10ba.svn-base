package ki.jfour;



import java.util.List;
import java.util.stream.Stream;

public class MyMinMaxAI extends AI{

    // start over - new test - new test again - and again
    public void start(Board b) {
        Player player = b.getCurrentPlayer();
        // depth = 3 or 4 test
        findBestMove(b, 4, Integer.MIN_VALUE, Integer.MAX_VALUE, true, player);
    }


    public int evaluate(Board b, Player myPlayer) {
        int score = 0;
        Player opponentPlayer = Player.RED;

        if (myPlayer == Player.RED) {
            opponentPlayer = Player.BLUE;
        }

        if (b.getWinner() == myPlayer) {
            score += 10000;
        } else if (getThreeRower(b) == myPlayer) {
            score += 20;
        } else if (getTwoRower(b) == myPlayer) {
            score += 3;
        }
        if (b.getWinner() == opponentPlayer) {
            score -= -10000;
        } else if (getThreeRower(b) == opponentPlayer) {
            score -= 20;
        } else if(getTwoRower(b) == opponentPlayer) {
            score -= 3;
        }

        /// specifically score 3 center columns
        int width = getWidth(b);
        int[] middleColumns =  new int[]{(width/2-1), width/2, (width/2+1)};
        int centerCount = 0;

        Player[][] boardState = b.getState();

        for (int i = 0; i < boardState.length; i++) {
            if (boardState[i][middleColumns[0]] == myPlayer) {
                centerCount += 2;
            }
            else if (boardState[i][middleColumns[1]] == myPlayer) {
                centerCount += 2;
            }
            else if (boardState[i][middleColumns[2]] == myPlayer) {
                centerCount += 2;
            }

        }
        score += centerCount;
        return score;
    }

    // function to get Width of board
    public int getWidth(Board b) {
        Player[][] board = b.getState();
        return board[0].length;
    }
    public int getHeight(Board b) {
        Player[][] board = b.getState();
        return board.length;
    }

    public boolean isTerminalNode(Board b) {
        if (b.getWinner() != Player.NONE) {
            return true;
        }
        return b.possibleMoves().size() == 0;
    }

    /*
    public Move makeRandomMove(Board b) {
        List<Move> possibleMoves = b.possibleMoves();
        Random random = new Random();
        return possibleMoves.get(random.nextInt(possibleMoves.size()));
    }

     */


    public int[] findBestMove(Board b, int depth, int alpha, int beta ,boolean isMax, Player myPlayer) {
        List<Move> possibleMoves = b.possibleMoves();
        //setBestMove(makeRandomMove(b));
        Player opponentPlayer = Player.BLUE;
        if (myPlayer == Player.BLUE) {
            opponentPlayer = Player.RED;
        }

        int boardWidth = getWidth(b);
        //setBestMove(new Move(boardWidth/2));

        boolean isTerminal = isTerminalNode(b);
        if (isTerminal || depth == 0) {
            if (isTerminal) {
                if (b.getWinner() == myPlayer) {
                    return new int[]{+1000000, -1};
                } else if (b.getWinner() == opponentPlayer) {
                    return new int[]{-1000000, -1};
                } else {
                    return new int[]{0, -1};
                }
            }
            else {
                //System.out.println(b);
                return new int[]{evaluate(b, myPlayer), -1};
            }

        }
        Move bestMove = new Move(boardWidth/2);
        if(isMax) {
            int value = Integer.MIN_VALUE;

            for (Move possibleMove: possibleMoves) {
                Board board_copy = b;
                board_copy = board_copy.executeMove(possibleMove);
                int newScore = findBestMove(board_copy, depth-1,alpha ,beta,false, myPlayer)[0];
                if (newScore > value) {
                    value = newScore;
                    bestMove = possibleMove;
                    //setBestMove(bestMove);
                }
                alpha = Math.max(alpha, value);
                if (alpha >= beta) {
                    break;
                }

            }
            setBestMove(bestMove);
            return new int[]{value, bestMove.column};
        }
        else {
            int value = Integer.MAX_VALUE;
            for (Move possibleMove: possibleMoves) {
                Board board_copy = b;
                board_copy = board_copy.executeMove(possibleMove);
                int newScore = findBestMove(board_copy, depth-1,alpha ,beta,true, myPlayer)[0];
                if (newScore < value) {
                    value = newScore;
                    bestMove = possibleMove;
                    //setBestMove(bestMove);
                }
                beta = Math.min(beta, value);
                if (alpha >= beta) {
                    break;
                }

            }
            //setBestMove(new Move(bestMove.column));
            setBestMove(bestMove);
            return new int[]{value, bestMove.column};
        }

    }


    public String getDescription() {
        return "Simon Unterlugauer";
    }

    /*
    functions to get Three pieces in a row
    1st function = returns Player.None or other player
    other functions checks board for 3 pieces in a row
     */

    public Player getThreeRower(Board b) {
        return Stream.of(
                        getDiagonalThree315Row(b),
                        getDiagonalThree45Row(b),
                        getVerticalThreeRow(b),
                        getHorizontalThreeRow(b))
                .filter(p -> p != Player.NONE)
                .findFirst()
                .orElse(Player.NONE);
    }

    private Player getDiagonalThree315Row(Board b) {
        int height = getHeight(b);
        int width = getWidth(b);
        Player[][] board = b.getState();
        for (int y = height - 1; y >= 3; y--) {
            for (int x = width - 1; x >= 3; x--) {
                if (board[y][x] != Player.NONE &&
                        board[y][x] == board[y - 1][x - 1] &&
                        board[y][x] == board[y - 2][x - 2] &&
                        board[y - 3][x - 3] == Player.NONE
                )
                {
                    return board[y][x];
                }
            }
        }
        return Player.NONE;
    }

    private Player getDiagonalThree45Row(Board b) {
        int height = getHeight(b);
        int width = getWidth(b);
        Player[][] board = b.getState();
        for (int y = height - 1; y >= 3; y--) {
            for (int x = 0; x < width - 3; x++) {
                if (board[y][x] != Player.NONE &&
                        board[y][x] == board[y - 1][x + 1] &&
                        board[y][x] == board[y - 2][x + 2] &&
                        board[y - 3][x + 3] == Player.NONE
                )
                {
                    return board[y][x];
                }
            }
        }

        return Player.NONE;
    }

    private Player getHorizontalThreeRow(Board b) {
        int height = getHeight(b);
        int width = getWidth(b);
        Player[][] board = b.getState();
        for (int x = 0; x < width - 3; x++) {
            for (int y = height - 1; y >= 0; y--) {
                if (board[y][x] != Player.NONE &&
                        board[y][x] == board[y][x + 1] &&
                        board[y][x] == board[y][x + 2] &&
                        board[y][x + 3] == Player.NONE)
                {
                    return board[y][x];
                }
            }
        }

        return Player.NONE;
    }

    private Player getVerticalThreeRow(Board b) {
        int height = getHeight(b);
        int width = getWidth(b);
        Player[][] board = b.getState();
        for (int y = height - 1; y >= 3; y--) {
            for (int x = 0; x < width; x++) {
                if (board[y][x] != Player.NONE &&
                        board[y][x] == board[y - 1][x] &&
                        board[y][x] == board[y - 2][x] &&
                        board[y - 3][x] == Player.NONE)
                {
                    return board[y][x];
                }
            }
        }

        return Player.NONE;
    }

    public Player getTwoRower(Board b) {
        return Stream.of(
                        getDiagonalTwo315Row(b),
                        getDiagonalTwo45Row(b),
                        getVerticalTwoRow(b),
                        getHorizontalTwoRow(b))
                .filter(p -> p != Player.NONE)
                .findFirst()
                .orElse(Player.NONE);
    }

    private Player getVerticalTwoRow(Board b) {
        int height = getHeight(b);
        int width = getWidth(b);
        Player[][] board = b.getState();
        for (int y = height - 1; y >= 3; y--) {
            for (int x = 0; x < width; x++) {
                if (board[y][x] != Player.NONE &&
                        board[y][x] == board[y - 1][x] &&
                        board[y - 2][x] == Player.NONE &&
                        board[y - 3][x] == Player.NONE) {
                    return board[y][x];
                }
            }
        }
        return Player.NONE;
    }
    private Player getHorizontalTwoRow(Board b) {
        int height = getHeight(b);
        int width = getWidth(b);
        Player[][] board = b.getState();
        for (int x = 0; x < width - 3; x++) {
            for (int y = height - 1; y >= 0; y--) {
                if (board[y][x] != Player.NONE &&
                        board[y][x] == board[y][x + 1] &&
                        board[y][x + 2] == Player.NONE &&
                        board[y][x + 3] == Player.NONE)
                {
                    return board[y][x];
                }
            }
        }

        return Player.NONE;
    }

    private Player getDiagonalTwo315Row(Board b) {
        int height = getHeight(b);
        int width = getWidth(b);
        Player[][] board = b.getState();
        for (int y = height - 1; y >= 3; y--) {
            for (int x = width - 1; x >= 3; x--) {
                if (board[y][x] != Player.NONE &&
                        board[y][x] == board[y - 1][x - 1] &&
                        board[y - 2][x - 2] == Player.NONE &&
                        board[y - 3][x - 3] == Player.NONE
                )
                {
                    return board[y][x];
                }
            }
        }
        return Player.NONE;
    }

    private Player getDiagonalTwo45Row(Board b) {
        Player[][] board = b.getState();
        int height = getHeight(b);
        int width = getWidth(b);
        for (int y = height - 1; y >= 3; y--) {
            for (int x = 0; x < width - 3; x++) {
                if (board[y][x] != Player.NONE &&
                        board[y][x] == board[y - 1][x + 1] &&
                        board[y - 2][x + 2] == Player.NONE&&
                        board[y - 3][x + 3] == Player.NONE
                )
                {
                    return board[y][x];
                }
            }
        }
        return Player.NONE;
    }

}
